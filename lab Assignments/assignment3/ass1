(defun make-a (n)
	(setf a (make-array (list n n)))
	(dotimes (i n)
		(dotimes (j n)
			(setf (aref a i j) -1)
		)
	)
	a
)

(defun copy-array (array)
	(let ((dims (array-dimensions array)))
		(adjust-array
    		(make-array dims :displaced-to array)
    	dims)
	)
)

(defun block-points (a n i j)
	(setf b (copy-array a))
	(dotimes (k n)
		(setf (aref b i k) 0)
		(if (> k i)
				(setf (aref b k j) 0)
		)
		(if (and (< (+ i k) n) (< (+ j k) n))
				(setf (aref b (+ i k) (+ j k)) 0)
		)
		(if (and (>= (- j k) 0) (< (+ i k) n))
				(setf (aref b (+ i k) (- j k)) 0)
		)
	)
	(setf (aref b i j) 1)
	b
)

(defun findpos (a n i j)
	(cond ((equal i n) (list a))
			((equal j n) '())
			(t (append (findpos a n i (+ 1 j))
						(if 	(equal -1 (aref a i j))
								(findpos (block-points a n i j) n (+ 1 i) 0)
						)
				)
			)
	)
)

(defun print-a (s n)
	(setf count (+ 1 count))
	(if (null s)
		'()
		(dotimes (i n)
			(dotimes (j n)
				(princ (aref s i j))
				(princ " ")
			)
			(terpri)
		)
	)
)

(defun print-s (set n)
	(print-a (car set) n)
	(terpri)
	(cond ((null set) '())
			(t (print-s (cdr set) n))
	)
)


(defun main (n)
	(setf count -1)
	(print-s (findpos (make-a n) n 0 0) n)
	(write count)
)
