(defun fun (set x y)
	(setf a x)
	(setf b y)
	(eval set)
)

(defun main (set)
	(if (equal t (fun set t nil))
			(princ "(t f) ")
	)
	(if (equal t (fun set t t))
			(princ "(t t) ")
	)
	(if (equal t (fun set nil t))
			(princ "(f t) ")
	)
	(if (equal t (fun set nil nil))
			(princ "(f f) ")
	)
	'are-the-models
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun set-var (set var val)
	(cond ((null set) '())
			((equal var (car set)) (cons val (set-var (cdr set) var val)))
			(t (cons (car set) (set-var (cdr set) var val)))
	)
)

(defun set-var-set (set var val)
	(cond ((null set) '())
			((null (cdr set)) (list (set-var (car set) var val)))
			(t (append (list (set-var (car set) var val) 'and) (set-var-set (cddr set) var val)))
	)
)

(defun get-var-set (set)
	(cond ((null set) '())
			((null (cdr set)) (get-var (car set)))
			((null (get-var (car set))) (get-var-set (cddr set)))
			(t (get-var (car set)))
	)
)

(defun get-var (arr)
	(cond ((null arr) '())
			((equal 'not (car arr)) (get-var (cdr arr)))
			((equal 'or (car arr)) (get-var (cdr arr)))
			((equal 'and (car arr)) (get-var (cdr arr)))
			((equal t (car arr)) (get-var (cdr arr)))
			((equal nil (car arr)) (get-var (cdr arr)))
			(t (car arr))
	)
)

(defun change-set (state)
	(cond ((null state) '())
			((equal (car state) 'not) (cons (not (cadr state)) (change-set (cddr state))))
			(t (cons (car state) (change-set (cdr state))))
	)
)

(defun change (set)
	(cond ((null set) '())
			((null (cdr set)) (list (change-set (car set))))
			(t (append (list (change-set (car set)) 'and) (change (cddr set))))
	)
)

(defun ev (state)
	(or (car state) (caddr state))
)

(defun evaluate (set)
	(cond ((null set) t)
			((null (cdr set)) (ev (car set)))
			(t (and (ev (car set)) (evaluate (cddr set))))
	)
)

(defun printing (s)
	(write s)
	(setf count 1)
	(terpri)
	'()
)

(defun fun (arr s)
	(if (null (get-var-set arr))
		(if (equal (evaluate (change arr)) t)
			(printing s)
		)
		(or 	(fun (set-var-set arr (get-var-set arr) t) (cons (list (get-var-set arr) 't) s)) 
				(fun (set-var-set arr (get-var-set arr) nil) (cons (list (get-var-set arr) 'f) s)))
	)
)

(defun main (arr)
	(setf count 0)
	(if (and (null (fun arr '())) (equal count 1))
		'are-the-models
		'unsatisfiable
	)
)

