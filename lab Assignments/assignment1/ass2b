(defun make-state (x y) (list x y))

(defun value-x (state) (car state))

(defun value-y (state) (cadr state))

(defun fill-x (state capacity) (make-state (car capacity) (cadr state)))

(defun fill-y (state capacity) (make-state (car state) (cadr capacity)))

(defun empty-x (state) (make-state 0 (cadr state)))

(defun empty-y (state) (make-state (car state) 0))

(defun pour-x-to-y (state capacity)
	(cond 	((< (cadr capacity) (+ (value-x state) (value-y state))) (list (- (value-x state) (- (cadr capacity) (value-y state))) (cadr capacity)))
		(t (list 0 (+ (value-x state) (value-y state))))
	)
)

(defun pour-y-to-x (state capacity)
	(cond 	((< (car capacity) (+ (value-x state) (value-y state)))
			(list (car capacity) (- (value-y state) (- (car capacity) (value-x state)))))
		(t (list (+ (value-x state) (value-y state)) 0))
	)
)

(defun is-goal (state water)
	(cond 	((equal state water) t)
		(t nil)
	)
)

(defun is-present (state mylist)
	(cond 	((null mylist) nil)
		((equal state (car mylist)) t)
		(t (is-present state (cdr mylist)))
	)
)

(defun generate-child (state capacity)
	(list (fill-x state capacity) (fill-y state capacity) (empty-x state) (empty-y state) (pour-x-to-y state capacity) (pour-y-to-x state capacity))
)

(defun bfs-jar-water (queue capacity water)
	(cond
		((null queue) nil)
		((is-goal water (caar queue)) (car queue))
		((let 	((children (generate-child (caar queue) capacity)))
		     	(bfs-jar-water (append (cdr queue) 
				(mapcar
				 #'(lambda (state)
				       (cons state (car queue)))
				 children)) capacity water)
		))
	)
)

(defun jar-water (capacity water) (bfs-jar-water '(((0 0))) capacity water))
