(defun f-pos (state) (car state))
(defun c-pos (state) (cadr state))
(defun g-pos (state) (caddr state))
(defun w-pos (state) (cadddr state))

(defun opposite (x) 
	(cond 	((eq x 'w) 'e)
		(t 'w)
	)
)

(defun is-safe (state)
	(cond 	((and (equal (c-pos state) (g-pos state)) (not (equal (c-pos state) (f-pos state)))) '())
		((and (equal (g-pos state) (w-pos state)) (not (equal (g-pos state) (f-pos state)))) '())
		(t state)
	)
)

(defun make-state (f c g w) (list f c g w))

(defun f-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (w-pos state)))
				(make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (w-pos state)))
		(t nil)
	)
)

(defun c-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (opposite (c-pos state)) (g-pos state) (w-pos state)))
				(make-state (opposite (f-pos state)) (opposite (c-pos state)) (g-pos state) (w-pos state)))
		(t nil)
	)
)

(defun g-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (c-pos state) (opposite (g-pos state)) (w-pos state)))
				(make-state (opposite (f-pos state)) (c-pos state) (opposite (g-pos state)) (w-pos state)))
		(t nil)
	)
)

(defun w-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (opposite (w-pos state))))
				(make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (opposite (w-pos state))))
		(t nil)
	)
)

(defun is-present (state mylist)
	(cond 	((null mylist) nil)
		((equal state (car mylist)) t)
		(t (is-present state (cdr mylist)))
	)
)

(defun fcgw (state goal output)
	(cond   ((null state) '())
		((equal state goal) (cons state output))
		((not (is-present state output)) (or (fcgw (f-change state) goal (cons state output))
			(fcgw (c-change state) goal (cons state output))
			(fcgw (g-change state) goal (cons state output))
			(fcgw (w-change state) goal (cons state output))))
	)
)

(defun solve-fcgw (state goal) (fcgw state goal '()))

