(defun f-pos (state) (car state))
(defun c-pos (state) (cadr state))
(defun g-pos (state) (caddr state))
(defun w-pos (state) (cadddr state))

(defun opposite (x) 
	(cond 	((eq x 'w) 'e)
		(t 'w)
	)
)

(defun is-safe (state)
	(cond 	((and (equal (c-pos state) (g-pos state)) (not (equal (c-pos state) (f-pos state)))) '())
		((and (equal (g-pos state) (w-pos state)) (not (equal (g-pos state) (f-pos state)))) '())
		(t state)
	)
)

(defun make-state (f c g w) (list f c g w))

(defun f-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (w-pos state)))
				(make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (w-pos state)))
		(t nil)
	)
)

(defun c-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (opposite (c-pos state)) (g-pos state) (w-pos state)))
				(make-state (opposite (f-pos state)) (opposite (c-pos state)) (g-pos state) (w-pos state)))
		(t nil)
	)
)

(defun g-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (c-pos state) (opposite (g-pos state)) (w-pos state)))
				(make-state (opposite (f-pos state)) (c-pos state) (opposite (g-pos state)) (w-pos state)))
		(t nil)
	)
)

(defun w-change (state)
	(cond 	((is-safe (make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (opposite (w-pos state))))
				(make-state (opposite (f-pos state)) (c-pos state) (g-pos state) (opposite (w-pos state))))
		(t nil)
	)
)

(defun is-present (state mylist)
	(cond 	((null mylist) nil)
		((equal state (car mylist)) t)
		(t (is-present state (cdr mylist)))
	)
)

(defun generate-child (state)
(list (f-change state) (c-change state) (g-change state) (w-change state)))

(defun filter-nil (x)
	(cond 	((null x) '())
		((equal (car x) nil) (filter-nil (cdr x)))
		(t (cons (car x) (filter-nil (cdr x))))
	)
)

(defun fcgw (queue goal)
	(cond	((null queue) nil)
		((equal goal (caar queue)) (car queue))
		((let 	((children (filter-nil (generate-child (caar queue)))))
		     	(fcgw (append (cdr queue) 
				(mapcar
				 #'(lambda (state)
				       (cons state (car queue)))
				 children)) goal)
		))
	)
)

(defun solve-fcgw (state goal) (fcgw (list (list state)) goal))

