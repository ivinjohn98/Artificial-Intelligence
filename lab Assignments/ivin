(defun power (a b)
	(cond ((< b 1) 1)
	(t (* a (power a (- b 1)))
)))
	
(defun count-atoms (a)
	(cond   ((eq a nil) 0)
		((listp (car a)) (+ (count-atoms (car a)) (count-atoms (cdr a))))
		(t (+ (count-atoms (cdr a)) 1))
	)
)

(defun count-anywhere (a l)
	(cond   ((eq l nil) 0)
		((eq a (car l)) (+ (count-anywhere a (cdr l)) 1))
		((listp (car l)) (+ (count-anywhere a (car l)) (count-anywhere a (cdr l))))
		(t (count-anywhere a (cdr l)))
	)
)

(defun dot-product (a l)
	(cond   ((eq l nil) 0)
		((eq a nil) 0)
		(t (+ (* (car a) (car l)) (dot-product (cdr a) (cdr l))))
	)
)

(defun flatten (a)
	(cond   ((eq a nil) '())
		((listp (car a)) (append (flatten (car a)) (flatten (cdr a))))
		(t (cons (car a) (flatten (cdr a))))
	)
)

(defun check (c a)
	(cond 	((eq a nil) f)
		((eq c (car a)) t)
		(check (c (cdr a)))
	)
)

(defun remove-dups (a)
	(cond   ((eq a nil) '())
		((check (car a) (cdr a)) (remove-dups (cdr a)))
		(t (cons (car a) (remove-dups (cdr a))))
	)
)
