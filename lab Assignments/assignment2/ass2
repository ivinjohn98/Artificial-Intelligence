(defun getval (state r c)
	(nth c (nth r state))
)

(defun putx (state r c xo)
	(cond ((> r 0) (cons (car state) (putx (cdr state) (- r 1) c xo)))
			((equal c 0) (cons (append (list xo) (cdar state)) (cdr state)))
			((equal c 1) (cons (list (caar state) xo (caddar state)) (cdr state)))
			(t (cons (list (caar state) (cadar state) xo) (cdr state)))
	)
)

(defun children (state i j xo)
	(cond ((> i 2) '())
			((> j 2) (children state (+ i 1) 0 xo))
			((not (equal '_ (getval state i j))) (children state i (+ j 1) xo))
			(t (cons (putx state i j xo) (children state i (+ j 1) xo)))
	)
)

(defun get-children (state xo) (children state 0 0 xo))

(defun cx (state xo i)
	(cond ((> i 7) 0)
			((and (equal 0 i) (or (equal (getval state 0 0) '_) (equal (getval state 0 0) xo))
									(or (equal (getval state 0 1) '_) (equal (getval state 0 1) xo))
									(or (equal (getval state 0 2) '_) (equal (getval state 0 2) xo)))
		(+ 1 (cx state xo 1)))
			((and (equal 1 i) (or (equal (getval state 1 0) '_) (equal (getval state 1 0) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 1 2) '_) (equal (getval state 1 2) xo)))
		(+ 1 (cx state xo 2)))
			((and (equal 2 i) (or (equal (getval state 2 0) '_) (equal (getval state 2 0) xo))
									(or (equal (getval state 2 1) '_) (equal (getval state 2 1) xo))
									(or (equal (getval state 2 2) '_) (equal (getval state 2 2) xo)))
		(+ 1 (cx state xo 3)))
			((and (equal 3 i) (or (equal (getval state 0 0) '_) (equal (getval state 0 0) xo))
									(or (equal (getval state 1 0) '_) (equal (getval state 1 0) xo))
									(or (equal (getval state 2 0) '_) (equal (getval state 2 0) xo)))
		(+ 1 (cx state xo 4)))
			((and (equal 4 i) (or (equal (getval state 0 1) '_) (equal (getval state 0 1) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 2 1) '_) (equal (getval state 2 1) xo)))
		(+ 1 (cx state xo 5)))
			((and (equal 5 i) (or (equal (getval state 0 2) '_) (equal (getval state 0 2) xo))
									(or (equal (getval state 1 2) '_) (equal (getval state 1 2) xo))
									(or (equal (getval state 2 2) '_) (equal (getval state 2 2) xo)))
		(+ 1 (cx state xo 6)))
			((and (equal 6 i) (or (equal (getval state 0 0) '_) (equal (getval state 0 0) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 2 2) '_) (equal (getval state 2 2) xo)))
		(+ 1 (cx state xo 7)))
			((and (equal 7 i) (or (equal (getval state 0 2) '_) (equal (getval state 0 2) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 2 0) '_) (equal (getval state 2 0) xo)))
		1)
			(t (cx state xo (+ 1 i)))
	)
)

(defun h (state) (- (cx state 'x 0) (cx state 'o 0)))

(defun ev (state xo)
	(cond	((and (equal (getval state 0 0) xo) (equal (getval state 0 1) xo) (equal (getval state 0 2) xo))
		1)
			((and (equal (getval state 1 0) xo) (equal (getval state 1 1) xo) (equal (getval state 1 2) xo))
		1)
			((and (equal (getval state 2 0) xo) (equal (getval state 2 1) xo) (equal (getval state 2 2) xo))
		1)
			((and (equal (getval state 0 0) xo) (equal (getval state 1 0) xo) (equal (getval state 2 0) xo))
		1)
			((and (equal (getval state 0 1) xo) (equal (getval state 1 1) xo) (equal (getval state 2 1) xo))
		1)
			((and (equal (getval state 0 2) xo) (equal (getval state 1 2) xo) (equal (getval state 2 2) xo))
		1)
			((and (equal (getval state 0 0) xo) (equal (getval state 1 1) xo) (equal (getval state 2 2) xo))
		1)
			((and (equal (getval state 0 2) xo) (equal (getval state 1 1) xo) (equal (getval state 2 0) xo))
		1)
			(t 0)
	)
)

(defun evaluate (state)
	(cond ((equal 1 (ev state 'x)) 8)
			((equal 1 (ev state 'o)) -8)
			(t 0)
	)
)

(defun maxs (set alpha beta v)
	(setf a (mins-tic (car set) alpha beta))
	(cond ((null set) v)
			((>= v beta) v)
			((> a v) (maxs (cdr set) (max alpha a) beta a))
			(t (maxs (cdr set) (max alpha v) beta v))
	)
)

(defun mins (set alpha beta v)
	(setf a (maxs-tic (car set) alpha beta))
	(cond ((null set) v)
			((<= v alpha) v)
			((< a v) (mins (cdr set) alpha (min beta v) a))
			(t (mins (cdr set) alpha (min beta v) v))
	)
)

(defun mins-tic (state alpha beta)
	(setf a (get-children state 'o))
	(cond ((equal 1 (ev state 'x)) 9)
			((null (cddr a)) (h state))
			(t (mins a alpha beta 10))
	)
)

(defun maxs-tic (state alpha beta)
	(setf a (get-children state 'x))
	(cond ((equal 1 (ev state 'o)) -9)
			((null (cddr a)) (h state))
			(t (maxs a alpha beta -10))
	)
)

(defun find-state-b (set l v out)
	(cond ((null set) out)
			((> (car l) v) (find-state-b (cdr set) (cdr l) (car l) (car set)))
			(t (find-state-b (cdr set) (cdr l) v out))
	)
)

(defun find-state-l (set l v out)
	(cond ((null set) out)
			((< (car l) v) (find-state-l (cdr set) (cdr l) (car l) (car set)))
			(t (find-state-l (cdr set) (cdr l) v out))
	)
)

(defun minimax (state xo)
	(cond ((equal xo 'x)
				(find-state-b (get-children state 'x) (mapcar #'(lambda (x) (mins-tic x -12 12)) (get-children state 'x)) -10 '()))
			(t (find-state-l (get-children state 'o) (mapcar #'(lambda (x) (maxs-tic x -12 12)) (get-children state 'o)) 10 '()))
	)
)

(defun game (state xo)
	(setf st (minimax state xo))
	(write st)
	(cond ((equal 1 (ev state 'x)) 'won)
			((equal 1 (ev state 'o)) 'lost)
			(t (game (read) xo))
	)
)

(defun tic-tac-toe ()
	(princ "Tic-Tac-Toe Game")
	(terpri)
	(princ "Do you want to make the first move(Y/N)")
	(terpri)
	(setq dis (read))
	(cond ((equal dis 'Y) (game (read) 'o))
		(t (game '((_ _ _)(_ _ _)(_ _ _)) 'o))
	)
)
