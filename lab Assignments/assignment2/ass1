(defun rotate (state)
	(list (list (caddr (car state)) (caddr (cadr state)) (caddr (caddr state)))
			(list (cadr (car state)) (cadr (cadr state)) (cadr (caddr state)))
			(list (car (car state)) (car (cadr state)) (car (caddr state)))
	)
)

(defun flip (state)
	(list (caddr state)
			(cadr state)
			(car state)
	)
)

(defun remove-similar (state kids)
	(cond ((null kids) '())
			((equal (rotate state) (car kids)) (remove-similar state (cdr kids)))
			((equal (rotate (rotate state)) (car kids)) (remove-similar state (cdr kids)))
			((equal (rotate (rotate (rotate state))) (car kids)) (remove-similar state (cdr kids)))
			((equal (flip state) (car kids)) (remove-similar state (cdr kids)))
			((equal (rotate (flip state)) (car kids)) (remove-similar state(cdr kids)))
			((equal (rotate (rotate (flip state))) (car kids)) (remove-similar state (cdr kids)))
			((equal (rotate (rotate (rotate (flip state)))) (car kids)) (remove-similar state (cdr kids)))
			(t cons (car kids) (remove-similar state (cdr kids)))
	)
)

(defun getval (state r c)
	(nth c (nth r state))
)

(defun putx (state r c xo)
	(cond ((> r 0) (cons (car state) (putx (cdr state) (- r 1) c xo)))
			((equal c 0) (cons (append (list xo) (cdar state)) (cdr state)))
			((equal c 1) (cons (list (caar state) xo (caddar state)) (cdr state)))
			(t (cons (list (caar state) (cadar state) xo) (cdr state)))
	)
)

(defun children (state i j xo)
	(cond ((> i 2) '())
			((> j 2) (children state (+ i 1) 0 xo))
			((not (equal '_ (getval state i j))) (children state i (+ j 1) xo))
			(t (cons (putx state i j xo) (children state i (+ j 1) xo)))
	)
)

(defun get-children (state xo) (children state 0 0 xo))

(defun cx (state xo i)
	(cond ((> i 7) 0)
			((and (equal 0 i) (or (equal (getval state 0 0) '_) (equal (getval state 0 0) xo))
									(or (equal (getval state 0 1) '_) (equal (getval state 0 1) xo))
									(or (equal (getval state 0 2) '_) (equal (getval state 0 2) xo)))
		(+ 1 (cx state xo 1)))
			((and (equal 1 i) (or (equal (getval state 1 0) '_) (equal (getval state 1 0) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 1 2) '_) (equal (getval state 1 2) xo)))
		(+ 1 (cx state xo 2)))
			((and (equal 2 i) (or (equal (getval state 2 0) '_) (equal (getval state 2 0) xo))
									(or (equal (getval state 2 1) '_) (equal (getval state 2 1) xo))
									(or (equal (getval state 2 2) '_) (equal (getval state 2 2) xo)))
		(+ 1 (cx state xo 3)))
			((and (equal 3 i) (or (equal (getval state 0 0) '_) (equal (getval state 0 0) xo))
									(or (equal (getval state 1 0) '_) (equal (getval state 1 0) xo))
									(or (equal (getval state 2 0) '_) (equal (getval state 2 0) xo)))
		(+ 1 (cx state xo 4)))
			((and (equal 4 i) (or (equal (getval state 0 1) '_) (equal (getval state 0 1) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 2 1) '_) (equal (getval state 2 1) xo)))
		(+ 1 (cx state xo 5)))
			((and (equal 5 i) (or (equal (getval state 0 2) '_) (equal (getval state 0 2) xo))
									(or (equal (getval state 1 2) '_) (equal (getval state 1 2) xo))
									(or (equal (getval state 2 2) '_) (equal (getval state 2 2) xo)))
		(+ 1 (cx state xo 6)))
			((and (equal 6 i) (or (equal (getval state 0 0) '_) (equal (getval state 0 0) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 2 2) '_) (equal (getval state 2 2) xo)))
		(+ 1 (cx state xo 7)))
			((and (equal 7 i) (or (equal (getval state 0 2) '_) (equal (getval state 0 2) xo))
									(or (equal (getval state 1 1) '_) (equal (getval state 1 1) xo))
									(or (equal (getval state 2 0) '_) (equal (getval state 2 0) xo)))
		1)
			(t (cx state xo (+ 1 i)))
	)
)

(defun h (state) (- (cx state 'x 0) (cx state 'o 0)))

(defun ev (state xo)
	(cond ((> i 7) 0)
			((and (equal (getval state 0 0) xo) (equal (getval state 0 1) xo) (equal (getval state 0 2) xo))
		1)
			((and (equal (getval state 1 0) xo) (equal (getval state 1 1) xo) (equal (getval state 1 2) xo))
		1)
			((and (equal (getval state 2 0) xo) (equal (getval state 2 1) xo) (equal (getval state 2 2) xo))
		1)
			((and (equal (getval state 0 0) xo) (equal (getval state 1 0) xo) (equal (getval state 2 0) xo))
		1)
			((and (equal (getval state 0 1) xo) (equal (getval state 1 1) xo) (equal (getval state 2 1) xo))
		1)
			((and (equal (getval state 0 2) xo) (equal (getval state 1 2) xo) (equal (getval state 2 2) xo))
		1)
			((and (equal (getval state 0 0) xo) (equal (getval state 1 1) xo) (equal (getval state 2 2) xo))
		1)
			((and (equal (getval state 0 2) xo) (equal (getval state 1 1) xo) (equal (getval state 2 0) xo))
		1)
			(t 0)
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun maxs (set)
	(reduce #'max (mapcar #'mins-tic set))
)

(defun mins (set)
	(reduce #'max (mapcar #'mins-tic set))
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defun maxs (set)
;	(cond ((null set) '())
;			((null (cdr set)) (mins-tic (car set)))
;			((> (mins-tic (car set)) (maxs (cdr set))) (mins-tic (car set)))
;			(t (maxs (cdr set)))
;	)
;)

;(defun mins (set)
;	(cond ((null set) '())
;			((null (cdr set)) (maxs-tic (car set)))
;			((< (maxs-tic (car set)) (mins (cdr set))) (maxs-tic (car set)))
;			(t (mins (cdr set)))
;	)
;)

(defun mins-tic (state)
	(setf a (get-children state 'o))
	(cond ((null (cddddr (cdddr a))) (h state))
			(t (mins a))
	)
)

(defun maxs-tic (state)
	(setf a (get-children state 'x))
	(cond ((null (cddddr (cdddr a))) (h state))
			(t (maxs a))
	)
)

(defun find-state-b (set l v out)
	(cond ((null set) out)
			((> (car l) v) (find-state-b (cdr set) (cdr l) (car l) (car set)))
			(t (find-state-b (cdr set) (cdr l) v out))
	)
)

(defun find-state-l (set l v out)
	(cond ((null set) out)
			((< (car l) v) (find-state-b (cdr set) (cdr l) (car l) (car set)))
			(t (find-state-b (cdr set) (cdr l) v out))
	)
)

(defun minmax (state xo)
	(cond ((equal xo 'x)
				(find-state-b (get-children state 'x) (mapcar #'mins-tic (get-children state 'x)) -9 '()))
			(t (find-state-l (get-children state 'o) (mapcar #'mins-tic (get-children state 'o)) 9 '()))
	)
)

